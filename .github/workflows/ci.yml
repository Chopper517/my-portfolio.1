name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and tag the Docker image
        run: |
          # Use a temporary local tag for the scan
          docker build -t my-portfolio-image:${{ github.run_number }} .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-portfolio-image:${{ github.run_number }}'
          format: 'table'
          exit-code: '1' # This will fail the job if vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change to your AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portfolio # Change to your ECR repository name
        run: |
          # Retag the local image with the ECR repository name
          docker tag my-portfolio-image:${{ github.run_number }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          docker tag my-portfolio-image:${{ github.run_number }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push the tagged images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # 1. Authenticate Docker with ECR on the remote server
            # Note: The remote server must have the AWS CLI installed and configured
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          
            # 2. Stop and remove the old container gracefully
            docker stop resume || true
            docker rm -f resume || true
          
            # 3. Pull the new image and run it
            docker run -d --name resume -p 8080:5001 ${{ secrets.ECR_REGISTRY }}/portfolio:${{ github.run_number }}